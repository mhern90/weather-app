{"version":3,"sources":["components/WeatherCard.js","components/SearchBox.js","components/HourlyForecastModal.js","helpers.js","containers/WeatherApp.js","registerServiceWorker.js","index.js"],"names":["WeatherCard","_ref","clickEvents","icon","temp","day","react_default","a","createElement","onClick","className","setIconClass","SearchBox","searchId","hasError","inputChangeEvents","id","placeholder","type","onChange","data-error","HourlyForecastModal","show","hideModal","hourly","selectedDay","modalShow","viewDayObj","find","el","hours","map","hour","i","degrees","numToDay","num","configureWeatherData","data","daysList","list","weatherObject","weekStartRaw","dt_txt","weekStartTime","split","weekEndRaw","length","weekStart","Date","toLocaleString","weekday","month","weekEnd","city","name","forecast","fiveDays","push","slice","forEach","dayInfo","Math","round","main","condition","weather","toLowerCase","date","getDay","dateCache","today","toLocaleDateString","localStorage","setItem","configureHourly","weatherData","weeklyData","prevDay","currentDay","element","index","time","startsWith","parseInt","substring","indexOf","timeStrFormatter","console","log","handleError","input","message","inputId","errorBox","document","querySelector","classList","remove","add","textContent","WeatherApp","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","retreiveWeatherData","isSearching","helpers","location","state","fetch","then","response","json","cod","getElementById","value","JSON","stringify","hourlyForecast","setState","catch","error","showModal","cachedDate","getItem","rawWeatherData","parse","selected","getSelectedDay","e","target","_this2","searchVal","_this3","hasOwnProperty","components_SearchBox","handleSearch","bind","onSearchChange","components_WeatherCard","onCardClick","components_HourlyForecastModal","Component","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","WeatherApp_WeatherApp","URL","process","origin","addEventListener","concat","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.19eb0c22.chunk.js","sourcesContent":["import React from 'react';\n\nconst setIconClass = (icon) => {\n  switch (icon) {\n    case 'clear':\n      return 'wi wi-day-sunny yellow';\n    case 'clouds':\n      return 'wi wi-day-cloudy light-silver';\n    case 'rain':\n      return 'wi wi-day-rain light-blue';\n    default:\n      return '';\n  }\n}\n\n// destructuring - grabbing the props.icon as {icon}\n// icon will eventually become an object\nconst WeatherCard = ({clickEvents, icon, temp, day}) => {\n    return (\n      <div onClick={clickEvents} className=\"weather-card fl w-20 pa2\">\n        <div className=\"pa4 br2 bg-light-gray tc ba b--black-10\">\n          <div className=\"pt4\">\n            <i className={setIconClass(icon) + \" text-60\"}></i>\n          </div>\n          <h2 className=\"temp f2 fw4 ma0 pt4\">{day}</h2>\n          <h3 className=\"temp f2 fw2 ma0\">{temp}&#176;</h3>\n        </div>\n      </div>\n    )\n}\n\nexport default WeatherCard;","import React from 'react';\n\nconst SearchBox = ({ clickEvents, searchId, hasError, inputChangeEvents}) => {\n\n    return (\n        <div className=\"tc center\">\n            <div>\n                <input id={searchId} className=\"f6 f5-l bn black-80 bg-white pa3 lh-solid br2-ns br--left-ns\" placeholder=\"Find weather by city\" type=\"text\" onChange={inputChangeEvents} />\n                <button onClick={clickEvents} className=\"f6 f5-l pv3 tc bn white pointer br2-ns br--right-ns dib white bg-dark-blue\">Search</button>\n            </div>\n            { hasError && \n                <div data-error={searchId} className=\"error-message dib pt2 f6 dark-red\"></div>\n            }     \n        </div>\n    )\n} \n\nexport default SearchBox;","import React from 'react';\n\n// should be passing in the hourly forecast data\nconst HourlyForecastModal = ({ show, hideModal, hourly, selectedDay}) => {\n\n    const modalShow = show ? \"modal-wrapper db\" : 'modal-wrapper dn';\n    const viewDayObj = hourly.find((el) => {\n        return el.day === selectedDay;\n    });\n\n    return (\n        <div className={modalShow}>\n            <div className=\"modal-main\">\n                <div className=\"pa4 pb5 tc\">         \n                    <h2>Hourly forecast for {viewDayObj.day}</h2>\n                    <ul className=\"list pl0\">\n                        {viewDayObj.hours.map((hour, i) => <li className=\"pb2\">{hour} - {viewDayObj.degrees[i]}&#176;</li>) }\n                    </ul>\n                    <button className=\"f6 link dim br2 ph3 pv2 mb2 dib white bg-purple fr pointer\" onClick={hideModal}>Close</button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default HourlyForecastModal;","/* data formatting */\n\nexport const numToDay = (num) => {\n    const dayMap = ['Sun', 'Mon', 'Tue', 'Wed', 'Thur', 'Fri', 'Sat'];\n    return dayMap[num];\n} \n\nexport const timeStrFormatter = (time) => {\n    let newTime = '',\n        hour = 0;\n\n    if (time.startsWith('00')) {\n        return '12:00 am';\n    } else if (time.startsWith('0')) {\n        hour = parseInt(time.substring(1, time.indexOf(':')));\n    }  else {\n        hour = parseInt(time.substring(0, time.indexOf(':')));\n    }\n\n    if (hour >= 12) {\n        newTime = hour === 12 ? hour + ':00 pm' : (hour - 12) + ':00 pm';\n    } else {\n        newTime = hour + ':00 am';\n    }\n\n    return newTime;\n}\n\nexport const configureWeatherData = (data) => {\n    const daysList = data.list;\n\n    let weatherObject = {},\n        weekStartRaw = daysList[0].dt_txt,\n        weekStartTime = weekStartRaw.split(' ')[1],\n        weekEndRaw = '';\n\n    for (var i = daysList.length - 1; i >= 0; i--) {\n        const weekEndTime = daysList[i].dt_txt.split(' ')[1];\n        if (weekEndTime === weekStartTime) {\n            weekEndRaw = daysList[i].dt_txt;\n            break;\n        }\n    }\n    \n\n    const weekStart = new Date(weekStartRaw).toLocaleString('en-En', { weekday: \"long\", month: \"long\", day: \"numeric\" });\n    const weekEnd = new Date(weekEndRaw).toLocaleString('en-En', { weekday: \"long\", month: \"long\", day: \"numeric\" });\n    weatherObject.city = data.city.name;\n    weatherObject.forecast = [];\n    weatherObject.weekStart = weekStart;\n    weatherObject.weekEnd = weekEnd;\n    const fiveDays = [];\n    fiveDays.push(data.list[0]);\n    for (var i = 8; i < data.list.length; i+=8) {\n        fiveDays.push(data.list[i]);\n    }\n    \n    data.list.slice(0, 5);\n    fiveDays.forEach(day => {\n        let dayInfo = {};\n        dayInfo.temp = Math.round(day.main.temp);\n        dayInfo.condition = day.weather[0].main.toLowerCase();\n\n        let date = new Date(day.dt_txt);\n        dayInfo.day = numToDay(date.getDay());\n        weatherObject.forecast.push(dayInfo);\n    });\n    return weatherObject;\n}\n\nexport const dateCache = () => {\n    let today = new Date(); \n    today = today.toLocaleDateString();\n\n    localStorage.setItem(\"currentDate\", today);\n}\n\nexport const configureHourly = (data) => {\n    let weatherData = data.list,\n        weeklyData = [],\n        prevDay = '',\n        currentDay = {};\n\n    weatherData.forEach((element, index) => {\n        let day = new Date(element.dt_txt).getDay();\n        weatherData[index].day = numToDay(day);\n        weatherData[index].time = timeStrFormatter(element.dt_txt.split(' ')[1]);\n    });\n\n    weatherData.forEach((element) => {\n        // initialize\n        if (prevDay === '') {\n            prevDay = element.day;\n            currentDay.day = element.day;\n            currentDay.hours = [];\n            currentDay.degrees = [];\n        }\n\n        if (prevDay !== element.day) {\n            prevDay = element.day;\n            weeklyData.push(currentDay);\n            currentDay = {};\n            currentDay.day = element.day;\n            currentDay.hours = [];\n            currentDay.degrees = [];\n        }\n\n        currentDay.hours.push(element.time);\n        currentDay.degrees.push(Math.round(element.main.temp));\n    });\n\n    console.log(weeklyData);\n    return weeklyData;\n}\n\n/* Error Handling */\n\nexport const handleError = (input, message) => {\n    const inputId = input.id,\n        errorBox = document.querySelector('.error-message[data-error=' + inputId+']');\n\n    input.classList.remove('bn');\n    input.classList.add('b--dark-red');\n    errorBox.textContent = message;\n}\n\nexport const removeError = (input) => {\n    const inputId = input.id,\n        errorBox = document.querySelector('.error-message[data-error=' + inputId + ']');\n\n    input.classList.add('bn');\n    input.classList.remove('b--dark-red');\n    errorBox.textContent = '';\n}","import React, { Component } from 'react';\nimport '../css/weatherApp.css';\nimport '../css/util.css';\nimport './weather-icons.min.css';\nimport WeatherCard from '../components/WeatherCard';\nimport SearchBox from '../components/SearchBox';\nimport HourlyForecastModal from '../components/HourlyForecastModal';\nimport * as helpers from '../helpers';\n\nexport default class WeatherApp extends Component {\n  constructor() {\n    super()\n    this.state = {\n      location: 'Chicago',\n      weather: {},\n      hourly : [],\n      modalShow : false,\n      selectedDay : 'Mon'\n    }\n\n  }\n\n  componentDidMount() {\n    const cachedDate = localStorage.getItem(\"currentDate\");\n    if (cachedDate != null) {\n      let today = new Date();\n        today = today.toLocaleDateString();\n      if (today === cachedDate) {\n        const rawWeatherData = JSON.parse(localStorage.getItem('rawWeatherData'));\n        const weatherObject = helpers.configureWeatherData(rawWeatherData);\n        const hourlyForecast = helpers.configureHourly(rawWeatherData);\n\n        this.setState({ hourly: hourlyForecast });\n        this.setState({ weather: weatherObject });\n      } else {\n        this.retreiveWeatherData(false);\n      }\n    } else {\n      this.retreiveWeatherData(false);\n    }\n  }\n\n  retreiveWeatherData = (isSearching) => {\n    helpers.dateCache(); // cache current date\n    const location = this.state.location;\n    fetch('https://api.openweathermap.org/data/2.5/forecast?q='+location+ ',us&units=imperial&APPID=d3fb98537841935db142bb370fd3e1c2')\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        // return simple weather object\n        if (data.cod === '404') {\n          helpers.handleError(document.getElementById('citySearch'), 'Invalid City Name')\n        } else {\n          if (isSearching) {\n            document.getElementById('citySearch').value = '';\n          }\n          localStorage.setItem(\"rawWeatherData\", JSON.stringify(data));\n          const weatherObject = helpers.configureWeatherData(data);\n          const hourlyForecast = helpers.configureHourly(data);\n          this.setState({ hourly: hourlyForecast });\n          this.setState({ weather: weatherObject });\n        }\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n\n  onCardClick(selected) {\n    this.getSelectedDay(selected)\n    this.showModal()\n  }\n\n  showModal = () => {\n    this.setState({modalShow: true})\n  }\n\n  hideModal = () => {\n    this.setState({ modalShow: false })\n  }\n\n  getSelectedDay(day) {\n    this.setState({ selectedDay : day})\n  }\n\n  onSearchChange(e) {\n    const input = e.target;\n    helpers.removeError(input);\n  }\n\n  handleSearch() {\n    const searchVal = document.getElementById('citySearch').value;\n    this.setState({ \n      location : searchVal,\n    }, () => {\n        this.retreiveWeatherData(true);    \n    });\n   \n  }\n\n  render() {\n    const { weather } = this.state;\n\n    if (!weather.hasOwnProperty('forecast')) {\n      return <h1>Loading...</h1>\n    } else {\n      const forecast = weather.forecast;\n      return (\n          <div id=\"weatherApp\" className=\"avenir bg-white cf pa4\">\n            <div className=\"container-1200 center bg-near-white cf pa4 pb6 ba b--black-10 shadow-4\">\n              <h1 className=\"normal tc f1 mid-gray pb1 ma0\">Weekly Weather Forcast</h1>\n              <h2 className=\"normal tc f2 black pb3 ma0\">{weather.city}</h2>\n              <SearchBox \n                searchId={\"citySearch\"}\n                clickEvents={this.handleSearch.bind(this)} \n                hasError={true}\n                inputChangeEvents={this.onSearchChange.bind(this)}\n              />\n              <p className=\"normal tc f3 black pb5\">{weather.weekStart} - {weather.weekEnd}</p>\n              <div className=\"weather-week-container\">\n                {\n                  forecast.map((day, i) => {\n                    return (\n                      <WeatherCard\n                        clickEvents={this.onCardClick.bind(this, forecast[i].day)} \n                        day={forecast[i].day}\n                        temp={forecast[i].temp}\n                        icon={forecast[i].condition}\n                      />\n                    )\n                  })\n                }\n              </div>\n            </div>\n            <HourlyForecastModal \n              hideModal={this.hideModal.bind(this)}\n              show={this.state.modalShow} \n              hourly={this.state.hourly}\n              selectedDay={this.state.selectedDay}\n            />\n          </div>\n        );\n    }\n  }\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport WeatherApp from './containers/WeatherApp';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'tachyons';\n\nReactDOM.render(<WeatherApp />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}